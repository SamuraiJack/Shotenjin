#!/usr/bin/perl

use strict;
use warnings;


use File::Find::Rule;
use Path::Class;
use Getopt::LL::Simple qw(
    --keep_whitespace|--kw
    --add_indentation|--ai
    --relative_cwd|--cwd
);


my $keep_whitespace = $ARGV{'--keep_whitespace'};
my $add_indentation = !$keep_whitespace && $ARGV{'--add_indentation'};
my $relative_cwd = $ARGV{'--relative_cwd'};


my @files;
my $param   = $ARGV[0];

if ($param && -d $param) {
    @files = File::Find::Rule->file->name('*.js')->in($param);
} elsif ($param && -e $param) {
    @files = ( $param )
} else {
    die "Can't find input files to process, specify it as 1st argument\n(either single file or directory to scan for *.js)\n"
}



my $GENERATED = '/* GENERATED BY SHOTENJIN.JOOSED HELPER, DO NOT MODIFY DIRECTLY */';
my $GENERATED_QUOTED = quotemeta $GENERATED;


foreach my $file (@files) {
    process_file($file)
}


sub process_file {
    my ($file) = @_;
    
    my $content = file($file)->slurp();
    
    my $content_copy = $content;
    
    pos $content = 0;
    
    while ($content =~ m!
        ^(?'overall'
          
            (?'directive'
            
                (?'whitespace'\s*) /\*tj  (?'template'.*?)  tj(?:file)?\*/  
            )
            
            (?:\s+$GENERATED_QUOTED\s+sources\s:\s'.*?'\s*)?
        )$
    !msgx) {
        
        my $overall             = $+{ overall };
        my $overall_quoted      = quotemeta $overall;
        
        my $whitespace          = $+{ whitespace };
        my $directive           = $+{ directive };
        my $template            = $+{ template };
        
        my $is_from_file        = $template =~ m/^file\(  (.+?)  \)$/mx;
        
        if ($is_from_file) {
            
            my $from_file = $relative_cwd ? file($1) : file($1)->absolute(file($file)->dir);
            
            if (-e $from_file) {
                $template = $from_file->slurp;
                
                if ($add_indentation) {
                    $template =~ s/^(.*)$/$whitespace    $1/mg; 
                    $template =~ s/(\r?\n)$/$1$whitespace/s;
                }
                
            } else {
                $template = "File [$from_file] not found";
            }
            
        } 
        
        # removing leading and trailing whitespace
        $template       =~ s/^\s*(.*?)\s*$/$1/mg unless $keep_whitespace;
#        $template       =~ s/^[\t\f ]*(.*?)[\t\f ]*$/$1/mg;
        
        # escaping \, new-lines and '
        $template       =~ s!\\!\\\\!g;
        $template       =~ s!\r?\n!\\n!g;
        $template       =~ s!'!\\'!g;
        
        $content_copy =~ s!$overall_quoted!${directive}\n\n$whitespace$GENERATED\n${whitespace}sources : '$template'!ms;
    }
   
    if ($content ne $content_copy) {
        my $fh = file($file)->openw();
        print $fh $content_copy;
        $fh->close();
        
        print "UPDATED: $file\n";
    }
}


